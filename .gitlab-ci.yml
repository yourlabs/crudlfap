variables:
  ANSIBLE_FORCE_COLOR: 'true'
  RELEASE_TAG: yourlabs/crudlfap:$CI_COMMIT_REF_NAME
  IMAGE_TAG: yourlabs/crudlfap:$CI_COMMIT_SHA

build:
  stage: build
  image: docker:stable
  before_script:
  - echo "$DOCKER_PASS" | docker login -u $DOCKER_USER --password-stdin
  script:
  - docker pull yourlabs/crudlfap:master || true
  - docker build -t $IMAGE_TAG .
  - docker push $IMAGE_TAG
  after_script:
  - docker logout

docs-qa:
  stage: build
  image: yourlabs/python
  script: tox -e docs

py-qa:
  stage: build
  image: yourlabs/python
  script: tox -e qa

py-test:
  stage: build
  image: yourlabs/python
  script:
  - tox -e py310-dj32
  - codecov -e $TOXENV

js-qa:
  image: node:10-alpine
  stage: build
  script:
  - cd js
  - yarn install
  - yarn run lint

# lets first have tests then enable this one
#js-test:
#  image: node:10-alpine
#  stage: build
#  script:
#  - npm install -g codecov
#  - cd js
#  - yarn install
#  - yarn test
#  - codecov

npm:
  stage: deploy
  only:
  - /^v\d+\./
  image: node:10-alpine
  variables:
    NODE_ENV: production
  script:
  - echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > ~/.npmrc
  - sed -i "s/GIT_TAG/${CI_COMMIT_REF_NAME/v/}/" js/package.json
  - grep version js/package.json
  - cd js; npm publish

pypi:
  stage: deploy
  image: yourlabs/python
  script: pypi-release

docker-release:
  stage: deploy
  image: docker:stable
  before_script:
  - echo "$DOCKER_PASS" | docker login -u $DOCKER_USER --password-stdin
  script:
  - docker pull $IMAGE_TAG
  - docker tag $IMAGE_TAG $RELEASE_TAG
  - docker push $RELEASE_TAG
  after_script:
  - docker logout
